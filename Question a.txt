Compress 1: 

First I have maintained the frequency of char c.
Whenever the c changes we insert the string in str.

Compress 2:

Obtained the char c with there frequency.
After that, I stacked the char with same frequency.

Decompress:

I have inserted the stacked into the result string according to there frequency.

Time complexity -
n = Len of string
Compress 1- O(n)
n = Len of compressed str
Compress 2- O(n)
n = Len of original str
Decompress - O(n)

Code -

#include<bits/stdc++.h>

using namespace std;

string compress1(string s){
	char c = s[0];
	int f = 1;
	string x;
	for(int i=1;i<s.length();i++){
	   // cout<<i<<": "<<x<<"\n";
		if(c != s[i]){
			x.push_back(c);
			x += to_string(f);
			c = s[i];
			f = 1;
		}
		else
			f++;
	}
	x.push_back(c);
	x += to_string(f);
	return x;
}

string compress2(string s){
	vector<char> v;
	vector<int> c;
	for(int i=0;i<s.length();){
		v.push_back(s[i]);
		i++;
		string x;
		while(isdigit(s[i])){
			x.push_back(s[i]);
			i++;
		}
		c.push_back(stoi(x));
	}

	string a;
	int f = c[0];
	a.push_back(v[0]);
	for(int i=1;i<v.size();i++){
		if(c[i] != f){
			a += to_string(f);
			a.push_back(v[i]);
			f = c[i];
		}
		else
			a.push_back(v[i]);
	}
	a += to_string(f);

	return a;
}

string obtain_original_string(string s){
	string x;
	for(int i=0;i<s.length();){
		string a, b;
		while(!isdigit(s[i])){
			a.push_back(s[i]);
			i++;
		}
		while(isdigit(s[i])){
			b.push_back(s[i]);
			i++;
		}
		int f = stoi(b);
		for(int j=0;j<a.size();j++){
			for(int k=0;k<f;k++)
				x.push_back(a[j]);
		}
	}
	return x;
}

int main(){
	string s;
	cin>>s;
	int l = s.length();

	string s1 = compress1(s);

	string s2 = compress2(s1);

	string s3 = obtain_original_string(s2);

	cout<<"Original string: "<<s<<"\n";
	cout<<"String aftre compression1: "<<s1<<"\n";
	cout<<"String after compression2: "<<s2<<"\n";
	cout<<"Decompressed string: "<<s3<<"\n";

    return 0;
}

